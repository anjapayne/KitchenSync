Introduction

Alingment_Tester.py is a tool used to test this algorithm using a specific hardware setup. The test involves recording a pulsing LED on camera as light, and by an external acquisition system as voltage. Using a computer vision package the brightness of the LED is stored as an array of values per frame. The two traces are then aligned using an index generated by AudioChannelSync.py. TestAlignment.py takes in a path to a .npy array of LED brightnesses by frame, an array of LED voltages by sample, and an index array. It then calculates the mean offset between the onset of the LED as light and as voltage, the standard deviation, the range of the offsets, and the correlation coefficient between the two aligned traces.

Setup

Attach an LED on pin 13 of the Arduino micro-controller who is being used as a pulse generator.  The sketch for the synchrony pulse generator produces a digital signal on pin 13 that can be used for this test. 

Attach the cathode and ground of this same LED to a ground and analog input on the data acquisition system who is being tested. This way, the LED is recorded as light by the camera, and as voltage by the external device. 

Record the synchrony signal, connect the Arduino's  analog pin #5 to a separate analog input channel, and to the microphone input of the camcorder, as described above. Zoom the camera such that the LED bulb exposes the entire frame. Record the signal for about as long as you feel your experiment will last. 

Analysts

After recording, generate a sample-to-frame index using Kitchen Sync. Using a video analysts package (matlap, openCv, .etc) create an array of values representing the brightness of the LED per frame. It is best to use the same video analysts package that will be used to process the results of your experiment. Store this array as a .npy file. Provided is brightest_pixel_array.py a simple python script that will achieve this using openCv.  

The LED voltage data recorded by the acquisition system must be stored in a .npy file. 

Alingment_Tester.py takes 3 arguments, the path to the .npy file containing LED brightens, the path of the .npy file containing LED voltage, and the path to the generated index file. The script can be ran like so:

$ python Alingment_Tester.py LED_Brightness.npy analog2.npy LED_Brightness.index.npy

Alingment_Tester.py will use these three files to calculate the mean offset between the onset of the LED as light and as voltage, the standard deviation, the range of the offsets, and the correlation coefficient between the two aligned traces.

Interpreting Results

Low Mean Offset, Low Standard Deviation, High Correlation

A low mean and standard deviation (< 1 frame) paired with a high correlation coefficient (> .7) is a good sign that you have achieved a proper alignment. 

High Mean Offset, Low Standard Deviation

A high mean (> 1 frame) paired with a low standard deviation means that the alignment is precise, but not accurate. Check your video trace for leading zeros, it is likely that you can shift your index by a whole-number of frames in order to achieve proper aliment. 

High Standard Deviation

This alignment is not correct. Check that you specified the correct sampling rate when generating your index.
